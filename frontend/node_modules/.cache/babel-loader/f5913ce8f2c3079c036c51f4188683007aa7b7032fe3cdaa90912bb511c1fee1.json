{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";export const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[isLoggedIn,setIsLoggedIn]=useState(false);const[user,setUser]=useState(null);const checkAuthStatus=()=>{const storedUser=localStorage.getItem('user');const token=localStorage.getItem('token');if(storedUser&&token){try{const parsedUser=JSON.parse(storedUser);setIsLoggedIn(true);setUser(parsedUser);}catch(error){console.error('Ошибка при разборе JSON:',error);setIsLoggedIn(false);setUser(null);}}else{setIsLoggedIn(false);setUser(null);}};const fetchUserData=async()=>{const token=localStorage.getItem('token');if(!token)return;try{const response=await fetch('http://localhost:8000/api/user/',{method:'GET',headers:{'Content-Type':'application/json','Authorization':\"Token \".concat(token)}});if(response.ok){const data=await response.json();setUser(data);localStorage.setItem('user',JSON.stringify(data));// Обновляем данные в localStorage\n}else{console.error('Ошибка при обновлении данных пользователя');}}catch(error){console.error('Ошибка при обновлении данных пользователя:',error);}};const login=(userData,token)=>{localStorage.setItem('user',JSON.stringify(userData));// Сохранение пользователя в localStorage\nlocalStorage.setItem('token',token);// Сохранение токена в localStorage\nsetIsLoggedIn(true);// Обновление состояния до \"вошел в систему\"\nsetUser(userData);// Установка данных пользователя в состояние\n};const logout=()=>{localStorage.removeItem('user');// Удаление пользователя из локального хранилища\nlocalStorage.removeItem('token');// Удаление токена из локального хранилища\nsetIsLoggedIn(false);// Обновление состояния до \"не вошел в систему\"\nsetUser(null);// Удаление данных пользователя из состояния\n};useEffect(()=>{checkAuthStatus();},[]);// Пустой массив зависимостей гарантирует, что эффект выполнится только один раз при монтировании\nreturn/*#__PURE__*/_jsx(AuthContext.Provider,{value:{isLoggedIn,setIsLoggedIn,user,setUser,checkAuthStatus,fetchUserData,login,logout},children:children});};export const useAuth=()=>useContext(AuthContext);","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","AuthContext","AuthProvider","_ref","children","isLoggedIn","setIsLoggedIn","user","setUser","checkAuthStatus","storedUser","localStorage","getItem","token","parsedUser","JSON","parse","error","console","fetchUserData","response","fetch","method","headers","concat","ok","data","json","setItem","stringify","login","userData","logout","removeItem","Provider","value","useAuth"],"sources":["/home/kiipod/projects/slwrm/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState(null);\n\n  const checkAuthStatus = () => {\n    const storedUser = localStorage.getItem('user');\n    const token = localStorage.getItem('token');\n    if (storedUser && token) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        setIsLoggedIn(true);\n        setUser(parsedUser);\n      } catch (error) {\n        console.error('Ошибка при разборе JSON:', error);\n        setIsLoggedIn(false);\n        setUser(null);\n      }\n    } else {\n      setIsLoggedIn(false);\n      setUser(null);\n    }\n  };\n\n  const fetchUserData = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) return;\n\n    try {\n      const response = await fetch('http://localhost:8000/api/user/', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Token ${token}`,\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setUser(data);\n        localStorage.setItem('user', JSON.stringify(data)); // Обновляем данные в localStorage\n      } else {\n        console.error('Ошибка при обновлении данных пользователя');\n      }\n    } catch (error) {\n      console.error('Ошибка при обновлении данных пользователя:', error);\n    }\n  };\n\n  const login = (userData, token) => {\n    localStorage.setItem('user', JSON.stringify(userData)); // Сохранение пользователя в localStorage\n    localStorage.setItem('token', token); // Сохранение токена в localStorage\n    setIsLoggedIn(true); // Обновление состояния до \"вошел в систему\"\n    setUser(userData); // Установка данных пользователя в состояние\n  };\n\n  const logout = () => {\n    localStorage.removeItem('user'); // Удаление пользователя из локального хранилища\n    localStorage.removeItem('token'); // Удаление токена из локального хранилища\n    setIsLoggedIn(false); // Обновление состояния до \"не вошел в систему\"\n    setUser(null); // Удаление данных пользователя из состояния\n  };\n\n  useEffect(() => {\n    checkAuthStatus();\n  }, []); // Пустой массив зависимостей гарантирует, что эффект выполнится только один раз при монтировании\n\n  return (\n    <AuthContext.Provider value={{ isLoggedIn, setIsLoggedIn, user, setUser, checkAuthStatus, fetchUserData, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}