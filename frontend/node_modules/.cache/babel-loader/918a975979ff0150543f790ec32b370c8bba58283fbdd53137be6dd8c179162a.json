{"ast":null,"code":"export const handleLogin=async(e,email,username,password,login,navigate,setError,setLoginAttempts)=>{e.preventDefault();try{const response=await fetch('http://localhost:8000/api/login/',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({login:email||username,password})});if(response.ok){const data=await response.json();login(data.user,data.user.token);// Сохраняем данные пользователя и токен в контексте\nnavigate('/');}else{setError('Неверный логин или пароль');setLoginAttempts(prevAttempts=>prevAttempts+1);// Увеличиваем количество попыток входа\n}}catch(error){console.error('Ошибка входа:',error);setError('Ошибка входа');setLoginAttempts(prevAttempts=>prevAttempts+1);// Увеличиваем количество попыток входа\n}};export const handleRegistration=async(e,password,confirmPassword,username,email,setError,setModalMessage,setIsModalOpen,setMode)=>{e.preventDefault();if(password!==confirmPassword){setError('Пароли не совпадают');setIsModalOpen(true);setModalMessage('Пароли не совпадают');return;}try{const response=await fetch('http://localhost:8000/api/register/',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({username,email,password})});const data=await response.json();if(response.ok){setModalMessage(data.message||'Пожалуйста, проверьте ваш email для подтверждения регистрации.');setIsModalOpen(true);setMode('login');}else{setError(data.error||JSON.stringify(data)||'Ошибка регистрации');setIsModalOpen(true);setModalMessage(data.error||JSON.stringify(data)||'Ошибка регистрации');}}catch(error){console.error('Ошибка регистрации:',error);setError('Ошибка регистрации');setIsModalOpen(true);setModalMessage('Ошибка регистрации');}};export const handleResetPassword=async(e,email,setError,setModalMessage,setIsModalOpen,setMode)=>{e.preventDefault();try{const response=await fetch('http://localhost:8000/api/reset-password/',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email})});if(response.ok){setModalMessage('Проверьте ваш email для инструкций по сбросу пароля.');setIsModalOpen(true);// Открываем модальное окно\nsetMode('login');}else{setError('Ошибка при сбросе пароля');}}catch(error){console.error('Ошибка при сбросе пароля:',error);setError('Ошибка при сбросе пароля');}};","map":{"version":3,"names":["handleLogin","e","email","username","password","login","navigate","setError","setLoginAttempts","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","data","json","user","token","prevAttempts","error","console","handleRegistration","confirmPassword","setModalMessage","setIsModalOpen","setMode","message","handleResetPassword"],"sources":["/home/kiipod/projects/slwrm/frontend/src/pages/Authorization/authFunctions.js"],"sourcesContent":["export const handleLogin = async (e, email, username, password, login, navigate, setError, setLoginAttempts) => {\n  e.preventDefault();\n\n  try {\n    const response = await fetch('http://localhost:8000/api/login/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ login: email || username, password }),\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      login(data.user, data.user.token); // Сохраняем данные пользователя и токен в контексте\n      navigate('/');\n    } else {\n      setError('Неверный логин или пароль');\n      setLoginAttempts(prevAttempts => prevAttempts + 1); // Увеличиваем количество попыток входа\n    }\n  } catch (error) {\n    console.error('Ошибка входа:', error);\n    setError('Ошибка входа');\n    setLoginAttempts(prevAttempts => prevAttempts + 1); // Увеличиваем количество попыток входа\n  }\n};\n\nexport const handleRegistration = async (e, password, confirmPassword, username, email, setError, setModalMessage, setIsModalOpen, setMode) => {\n  e.preventDefault();\n\n  if (password !== confirmPassword) {\n    setError('Пароли не совпадают');\n    setIsModalOpen(true);\n    setModalMessage('Пароли не совпадают');\n    return;\n  }\n\n  try {\n    const response = await fetch('http://localhost:8000/api/register/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ username, email, password }),\n    });\n\n    const data = await response.json();\n\n    if (response.ok) {\n      setModalMessage(data.message || 'Пожалуйста, проверьте ваш email для подтверждения регистрации.');\n      setIsModalOpen(true);\n      setMode('login');\n    } else {\n      setError(data.error || JSON.stringify(data) || 'Ошибка регистрации');\n      setIsModalOpen(true);\n      setModalMessage(data.error || JSON.stringify(data) || 'Ошибка регистрации');\n    }\n  } catch (error) {\n    console.error('Ошибка регистрации:', error);\n    setError('Ошибка регистрации');\n    setIsModalOpen(true);\n    setModalMessage('Ошибка регистрации');\n  }\n};\n\nexport const handleResetPassword = async (e, email, setError, setModalMessage, setIsModalOpen, setMode) => {\n  e.preventDefault();\n\n  try {\n    const response = await fetch('http://localhost:8000/api/reset-password/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email }),\n    });\n\n    if (response.ok) {\n      setModalMessage('Проверьте ваш email для инструкций по сбросу пароля.');\n      setIsModalOpen(true); // Открываем модальное окно\n      setMode('login');\n    } else {\n      setError('Ошибка при сбросе пароля');\n    }\n  } catch (error) {\n    console.error('Ошибка при сбросе пароля:', error);\n    setError('Ошибка при сбросе пароля');\n  }\n};\n"],"mappings":"AAAA,MAAO,MAAM,CAAAA,WAAW,CAAG,KAAAA,CAAOC,CAAC,CAAEC,KAAK,CAAEC,QAAQ,CAAEC,QAAQ,CAAEC,KAAK,CAAEC,QAAQ,CAAEC,QAAQ,CAAEC,gBAAgB,GAAK,CAC9GP,CAAC,CAACQ,cAAc,CAAC,CAAC,CAElB,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,kCAAkC,CAAE,CAC/DC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEX,KAAK,CAAEH,KAAK,EAAIC,QAAQ,CAAEC,QAAS,CAAC,CAC7D,CAAC,CAAC,CAEF,GAAIM,QAAQ,CAACO,EAAE,CAAE,CACf,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAClCd,KAAK,CAACa,IAAI,CAACE,IAAI,CAAEF,IAAI,CAACE,IAAI,CAACC,KAAK,CAAC,CAAE;AACnCf,QAAQ,CAAC,GAAG,CAAC,CACf,CAAC,IAAM,CACLC,QAAQ,CAAC,2BAA2B,CAAC,CACrCC,gBAAgB,CAACc,YAAY,EAAIA,YAAY,CAAG,CAAC,CAAC,CAAE;AACtD,CACF,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,eAAe,CAAEA,KAAK,CAAC,CACrChB,QAAQ,CAAC,cAAc,CAAC,CACxBC,gBAAgB,CAACc,YAAY,EAAIA,YAAY,CAAG,CAAC,CAAC,CAAE;AACtD,CACF,CAAC,CAED,MAAO,MAAM,CAAAG,kBAAkB,CAAG,KAAAA,CAAOxB,CAAC,CAAEG,QAAQ,CAAEsB,eAAe,CAAEvB,QAAQ,CAAED,KAAK,CAAEK,QAAQ,CAAEoB,eAAe,CAAEC,cAAc,CAAEC,OAAO,GAAK,CAC7I5B,CAAC,CAACQ,cAAc,CAAC,CAAC,CAElB,GAAIL,QAAQ,GAAKsB,eAAe,CAAE,CAChCnB,QAAQ,CAAC,qBAAqB,CAAC,CAC/BqB,cAAc,CAAC,IAAI,CAAC,CACpBD,eAAe,CAAC,qBAAqB,CAAC,CACtC,OACF,CAEA,GAAI,CACF,KAAM,CAAAjB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,qCAAqC,CAAE,CAClEC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEb,QAAQ,CAAED,KAAK,CAAEE,QAAS,CAAC,CACpD,CAAC,CAAC,CAEF,KAAM,CAAAc,IAAI,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAElC,GAAIT,QAAQ,CAACO,EAAE,CAAE,CACfU,eAAe,CAACT,IAAI,CAACY,OAAO,EAAI,gEAAgE,CAAC,CACjGF,cAAc,CAAC,IAAI,CAAC,CACpBC,OAAO,CAAC,OAAO,CAAC,CAClB,CAAC,IAAM,CACLtB,QAAQ,CAACW,IAAI,CAACK,KAAK,EAAIR,IAAI,CAACC,SAAS,CAACE,IAAI,CAAC,EAAI,oBAAoB,CAAC,CACpEU,cAAc,CAAC,IAAI,CAAC,CACpBD,eAAe,CAACT,IAAI,CAACK,KAAK,EAAIR,IAAI,CAACC,SAAS,CAACE,IAAI,CAAC,EAAI,oBAAoB,CAAC,CAC7E,CACF,CAAE,MAAOK,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAC,CAC3ChB,QAAQ,CAAC,oBAAoB,CAAC,CAC9BqB,cAAc,CAAC,IAAI,CAAC,CACpBD,eAAe,CAAC,oBAAoB,CAAC,CACvC,CACF,CAAC,CAED,MAAO,MAAM,CAAAI,mBAAmB,CAAG,KAAAA,CAAO9B,CAAC,CAAEC,KAAK,CAAEK,QAAQ,CAAEoB,eAAe,CAAEC,cAAc,CAAEC,OAAO,GAAK,CACzG5B,CAAC,CAACQ,cAAc,CAAC,CAAC,CAElB,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,2CAA2C,CAAE,CACxEC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEd,KAAM,CAAC,CAChC,CAAC,CAAC,CAEF,GAAIQ,QAAQ,CAACO,EAAE,CAAE,CACfU,eAAe,CAAC,sDAAsD,CAAC,CACvEC,cAAc,CAAC,IAAI,CAAC,CAAE;AACtBC,OAAO,CAAC,OAAO,CAAC,CAClB,CAAC,IAAM,CACLtB,QAAQ,CAAC,0BAA0B,CAAC,CACtC,CACF,CAAE,MAAOgB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACjDhB,QAAQ,CAAC,0BAA0B,CAAC,CACtC,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}